<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>temp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>angle = 0;
velX = 0;
velY = 0;

maxSpeed = 10;

rotationSpeed = 9;
thrust = 0.2;


isThrusting = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>countThing = 0;

partSystem = part_system_create();
partEmitter = part_emitter_create(partSystem);

partThrust = part_type_create();
part_type_shape(   partThrust, pt_shape_explosion);
part_type_alpha3(  partThrust, 1, 0.7, 0.01);
part_type_colour3( partThrust,
        make_colour_rgb(255, 248, 160), 
        make_colour_rgb(237, 155, 68), 
        make_colour_rgb(232, 214, 206));
part_type_blend(   partThrust, true);
part_type_life(    partThrust, 70, 100);
part_type_scale(   partThrust, 2, 2);
part_type_size(    partThrust, 0.3, 0.4, -0.01, 0.001);
part_type_speed(   partThrust, 6, 10, 0, 0);

part_system_depth(partSystem, depth + 1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var input_rotation = keyboard_check(vk_right) - keyboard_check(vk_left);
var input_thrust = keyboard_check(vk_up);

angle -= input_rotation * rotationSpeed;

image_angle = angle;

if (input_thrust) {
    velX += lengthdir_x(thrust, angle);
    velY += lengthdir_y(thrust, angle);
}

if (sqr(velX) + sqr(velY) &gt; sqr(maxSpeed)) {
    var magnitude = sqrt(sqr(velX) + sqr(velY));
    velX /= magnitude;
    velY /= magnitude;
    velX *= maxSpeed;
    velY *= maxSpeed;
}

x += velX;
y += velY;

isThrusting = input_thrust;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_type_direction(partThrust, angle + 175, angle + 185,0,0.01);
part_emitter_region(partSystem,partEmitter, x - 5, x + 5, y - 5, y + 5, ps_shape_ellipse,ps_distr_gaussian);

if (isThrusting) {
    countThing++;
} else {
    countThing--;   
}
countThing = clamp(countThing, 0, 5);

if (countThing &gt; 0) {
    part_emitter_burst(partSystem,partEmitter,partThrust, countThing);
}

part_system_update(partSystem);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
