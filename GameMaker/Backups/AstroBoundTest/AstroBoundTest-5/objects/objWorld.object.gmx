<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tileset
_tileset = TILESET_EARTH;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tilemap List

_chunks = ds_list_create();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physical constants
_gravity = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy chunks 

for(var i = 0; i &lt; ds_list_size(_chunks); i++) {
    tilemap_destroy(_chunks[| i]);
}
ds_list_destroy(_chunks);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle chunks

/*
var fakeWidth = 640;
var fakeHeight = 480;
var leftView = view_xview + view_wview/2 - fakeWidth/2;
var rightView = leftView + fakeWidth;
var topView = view_yview + view_hview/2 - fakeHeight/2;
var bottomView = topView + fakeHeight;
*/


var viewBuffer = TILE_WIDTH * 3.5;

var leftView = view_xview - viewBuffer;
var rightView = leftView + view_wview + viewBuffer;
var topView = view_yview - viewBuffer;
var bottomView = topView + view_hview + viewBuffer;


var left = floor(leftView / (CHUNK_WIDTH * TILE_WIDTH));
var right = floor(rightView / (CHUNK_WIDTH * TILE_WIDTH));
var top = floor(topView / (CHUNK_HEIGHT * TILE_HEIGHT));
var bottom = floor(bottomView / (CHUNK_HEIGHT * TILE_HEIGHT));


/*
 *  Weird chunk algorithm:
 *
 *    1) Make a boolean 2d grid that spans the chunks we're supposed to generate.
 *
 *    2) Scroll through every chunk so far: If it's out of bounds, delete. Otherwise, mark the grid in that spot as "true" (It's already satisfied)
 *
 *    3) Go through every spot on the grid: If the spot is marked "false", generate a new chunk there.
 *
 *    4) Clean up
 *
 */

// Step 1
var tempCheckGrid = ds_grid_create(right - left + 1, bottom - top + 1);
//show_debug_message("tempCheckGrid size: (" + string(ds_grid_width(tempCheckGrid)) + "," + string(ds_grid_height(tempCheckGrid)) + ")");

// Step 2
for(var chunkIndex = ds_list_size(_chunks) - 1; chunkIndex &gt;= 0; chunkIndex--) {
    var tilemap = _chunks[| chunkIndex];
    var chunkX = floor(tilemap_get_position_x(tilemap) / (CHUNK_WIDTH * TILE_WIDTH));
    var chunkY = floor(tilemap_get_position_y(tilemap) / (CHUNK_HEIGHT * TILE_HEIGHT));
    // If we're out of bounds, delete.
    if (chunkX &lt; left || chunkX &gt; right || chunkY &lt; top || chunkY &gt; bottom) {
        ds_list_delete(_chunks, chunkIndex);
        tilemap_destroy(tilemap);
    }
    // Otherwise, mark us on the grid!

    var tempCheckGridX = chunkX - left;
    var tempCheckGridY = chunkY - top;
    // TODO: Here we're artificially not setting the grid when it's out of bounds.
    // But... why does this happen? Why do we go out of bounds?
    // Delete this conditional check and you'll see "index out of bounds" messages.
    if !(tempCheckGridX &lt; 0 || tempCheckGridX &gt;= ds_grid_width(tempCheckGrid)
     || tempCheckGridY &lt; 0 || tempCheckGridY &gt;= ds_grid_height(tempCheckGrid)) {
        tempCheckGrid[# tempCheckGridX, tempCheckGridY] = true;
     }
}

// Step 3
for(var yy = 0; yy &lt; ds_grid_height(tempCheckGrid); yy++) {
    for(var xx = 0; xx &lt; ds_grid_width(tempCheckGrid); xx++) {
        if (! tempCheckGrid[# xx, yy]) {
            var newChunk = tilemap_create(CHUNK_WIDTH, CHUNK_HEIGHT, _tileset);
            tilemap_set_position(newChunk, (left + xx)*CHUNK_WIDTH*TILE_WIDTH, (top + yy)*CHUNK_HEIGHT*TILE_HEIGHT);
            world_generate_chunk(id, newChunk);
            ds_list_add(_chunks, newChunk);
        }
    }
}

// Step 4
ds_grid_destroy(tempCheckGrid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw fake view
/*
draw_rectangle(
    view_xview + view_wview/2 - 640/2,
    view_yview + view_hview/2 - 480/2,
    view_xview + view_wview/2 + 640/2,
    view_yview + view_hview/2 + 480/2,
    true);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
