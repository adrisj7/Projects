<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship_ag</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ship_base</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ship properties

// Ship stats
_ship_accel = 0.1 * 2;
_ship_max_vel = 7;
_ship_turning = 0.35;

// Hidden stats/physics
// While driving
_ship_side_fric = 0.05;

// While free moving
_ship_side_fric_free = 0.01;
_ship_drag = 0.01;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls
_input_thrust = false;
_input_rotation = 0; // -1 to 1, left to right, 0 being in the middle
_input_airbrake_left = false;
_input_airbrake_right = false;


// Side shift
_input_airbrake_left_prev  = false;
_input_airbrake_right_prev = false;

_sideshift_last_dir = 0;   // The last direction that was tapped
_sideshift_last_timer = 0; // The last time a direction was pressed
_sideshift_time_threshold = 20;

_sideshift_dir = 0; // What direction we want to currently sideshift in
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wipeout factors

// While driving with air brakes
_ship_side_fric_brakes = 0.1;

// Airbrake rotational intensity is determined by the square of velocity
_ship_airbrake_factor = 0.015;
// Airbrake slowdown factor, also scales by square of velocity
_ship_airbrake_drag_factor = 0.005;

// Side shift force
_ship_side_shift_force = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Apply controls

var move_angle = point_direction(0, 0, _vel_x, _vel_y);
var delta_angle = angle_difference(image_angle, move_angle);
show_debug_message(delta_angle / 180);
// Thrust. Speical thrust, higher thrust if we're moving away from our angle
// (make drifting actually do something!!)
if _input_thrust {
    var accel = _ship_accel * (0.5 + 0.5 * abs(delta_angle) / 180);
    _vel_x += lengthdir_x(accel, image_angle);
    _vel_y += lengthdir_y(accel, image_angle);
}

// How much our ship's rotation is pushed
var rotation_push = _input_rotation * _ship_turning;
var vel_sqr = _vel_x*_vel_x + _vel_y*_vel_y;
rotation_push += (_input_airbrake_right - _input_airbrake_left) * vel_sqr * _ship_airbrake_factor;
_angular_velocity += rotation_push;


// Asymp clamp that
_angular_velocity *= 0.9;
// If we're not pushing, just kinda stop it
if (rotation_push == 0) {
    _angular_velocity *= 0.5;
}

// roll
_roll = _angular_velocity * (90 / 9);
_roll = clamp(_roll, -90, 90);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement Physics

var vel = point_distance(0, 0, _vel_x, _vel_y);
var move_angle = point_direction(0, 0, _vel_x, _vel_y);

// Clamp to max vel
if (vel &gt;  _ship_max_vel) {
    _vel_x *= _ship_max_vel / vel;
    _vel_y *= _ship_max_vel / vel;
    vel = _ship_max_vel;
    // move angle should be the same since we're just scaling.... right?
}

// Forward and sideways components
var delta_angle = move_angle - image_angle;
var vel_forward = lengthdir_x(vel, delta_angle);
var vel_side    = lengthdir_y(vel, delta_angle);

// Apply drag and side fric
if abs(vel_forward) &lt; _ship_drag {
    vel_forward = 0;
} else {
    if (_input_airbrake_left || _input_airbrake_right) {
        // With airbrakes
        var spdsqr = vel * vel;
        vel_forward -= sign(vel_forward) * _ship_airbrake_drag_factor
                * spdsqr * (_input_airbrake_left + _input_airbrake_right);    
    } else {
        // no airbrakes
        vel_forward -= sign(vel_forward) * _ship_drag;
    }
    // If airbrakes are on
}
if (_input_thrust &amp;&amp; (_input_airbrake_left || _input_airbrake_right)) {
    vel_side *= (1 - _ship_side_fric_brakes);
} else if (_input_thrust) {
    vel_side *= (1 - _ship_side_fric);
} else {
    vel_side *= (1 - _ship_side_fric_free);
}

// Side shifting
if (_sideshift_dir != 0) {
    vel_side += _ship_side_shift_force * _sideshift_dir;
    _sideshift_dir = 0;
}

// Reconstruct from our components
_vel_x = lengthdir_x(vel_forward, image_angle) + lengthdir_x(vel_side, image_angle - 90);
_vel_y = lengthdir_y(vel_forward, image_angle) + lengthdir_y(vel_side, image_angle - 90);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
