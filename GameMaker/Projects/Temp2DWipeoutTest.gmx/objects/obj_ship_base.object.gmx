<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship_ag</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics
_vel_x = 0;
_vel_y = 0;

_angular_velocity = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sprite handling
// What frame is our "middle, roll = 0" frame
_middle_frame = image_number / 2; // 3
// How many frames we rotate to 90 degrees
_rotation_frames = 3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Rotation
_roll = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ship properties

// Ship stats
_ship_accel = 0.1 * 2;
_ship_max_vel = 7;
_ship_turning = 0.35;

// Hidden stats/physics
// While driving
_ship_side_fric = 0.05;
// While driving with air brakes
_ship_side_fric_brakes = 0.1;
// While free moving
_ship_side_fric_free = 0.01;
_ship_drag = 0.01;

// Airbrake rotational intensity is determined by the square of velocity
_ship_airbrake_factor = 0.015;
// Airbrake slowdown factor, also scales by square of velocity
_ship_airbrake_drag_factor = 0.005;

// Side shift force
_ship_side_shift_force = 4;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls
_input_thrust = false;
_input_rotation = 0; // -1 to 1, left to right, 0 being in the middle
_input_airbrake_left = false;
_input_airbrake_right = false;


// Side shift
_input_airbrake_left_prev  = false;
_input_airbrake_right_prev = false;

_sideshift_last_dir = 0;   // The last direction that was tapped
_sideshift_last_timer = 0; // The last time a direction was pressed
_sideshift_time_threshold = 20;

_sideshift_dir = 0; // What direction we want to currently sideshift in
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera TEMP

var len = view_hview / 2 - 64;
len += (sqr(_vel_x) + sqr(_vel_y)) * 2;
var target_x = x - view_wview/2 + lengthdir_x(len, image_angle);
var target_y = y - view_hview/2 + lengthdir_y(len, image_angle);

var factor = 0.08;
view_xview += (target_x - view_xview) * factor;
view_yview += (target_y - view_yview) * factor;
view_xview = round(view_xview);
view_yview = round(view_yview);

view_angle += (-image_angle + 90 - view_angle) * 0.1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement and Collision

/// Angular movement
// -= because right is negative
image_angle -= _angular_velocity;

var bounce_back = 0.2;

/// Collision
if place_meeting(x + _vel_x, y, obj_collision) {
    _vel_x *= -1 * bounce_back;
}

x += _vel_x;

if place_meeting(x, y + _vel_y, obj_collision) {
    _vel_y *= -1 * bounce_back;
}

y += _vel_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get input
_input_thrust = keyboard_check(vk_up);
_input_rotation = keyboard_check(vk_right) - keyboard_check(vk_left);
_input_airbrake_left = keyboard_check(ord("A"));
_input_airbrake_right = keyboard_check(ord("D"));

var pad_index = 0;
if (gamepad_is_connected(pad_index)) {    
    _input_thrust = _input_thrust || gamepad_button_check(pad_index, gp_face1);
    _input_rotation += gamepad_axis_value(pad_index, gp_axislh);
    _input_rotation = clamp(_input_rotation, -1, 1);
    _input_airbrake_left = _input_airbrake_left || gamepad_button_check(pad_index, gp_shoulderl);
    _input_airbrake_right = _input_airbrake_right || gamepad_button_check(pad_index, gp_shoulderr);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Side shifting
var left_pressed  = _input_airbrake_left  &amp;&amp; !_input_airbrake_left_prev;
var right_pressed = _input_airbrake_right &amp;&amp; !_input_airbrake_right_prev;

// If we're not in the middle of a sideshift check
if _sideshift_last_dir == 0 {
    _sideshift_last_dir = right_pressed - left_pressed;
    _sideshift_last_timer = 0;
} else {
    if (_sideshift_last_timer &gt;= _sideshift_time_threshold) {
        // timeout
        _sideshift_last_dir = 0;
    } else {
        // Check for our second press
        var now_dir = right_pressed - left_pressed;
        if (now_dir == _sideshift_last_dir) {
            // SIDE SHIFT and reset!
            _sideshift_dir = now_dir;
            _sideshift_last_dir = 0;
        }
        _sideshift_last_timer++;
    }
}

_input_airbrake_left_prev = _input_airbrake_left;
_input_airbrake_right_prev = _input_airbrake_right;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Rotation
image_index = _middle_frame + (_roll / 90) * _rotation_frames;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
