<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera modes and settings
enum MODE {
    STRICT,
    LERP,
    ASYM // Asymptote. IDK what else to call this
}

// MODE SETTINGS
mode = MODE.ASYM;

lerp_speed_x = 1;
lerp_speed_y = 1;

asym_factor_x = 0.1;
asym_factor_y = 0.06;

// OTHER, GENERAL SETTINGS

shake_scale_x = 0;
shake_scale_y = 0;

// Buffer window where our character can move without the camera moving
no_snap_buffer_x = 20;
no_snap_buffer_y = 70;

// Whether to snap y (used for mario style y-snapping)
use_snap_y = true;
snap_y = false;

// Factor to make falling snap more powerful
// Warning: Leads to weird snapping when transitioning
fall_bias_factor = 5;
use_fall_bias_factor = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera Util variables
// Used for y mario snapping
last_y_before_snap = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move view by mode

// Centers camera
var vx = view_xview + view_wview / 2, vy = view_yview + view_hview / 2;
var target_x = x, target_y = y;

// Hug the walls of the no-snap buffer
if abs(target_x - vx) &gt; no_snap_buffer_x {
    target_x = target_x - sign(target_x - vx) * no_snap_buffer_x;
} else {
    target_x = vx;
}

if abs(target_y - vy) &gt; no_snap_buffer_y {
    target_y = target_y - sign(target_y - vy) * no_snap_buffer_y;
} else {
    if use_snap_y
        target_y = last_y_before_snap;
    else
        target_y = vy;
}

if use_snap_y {
    if snap_y {
        target_y = y;
        last_y_before_snap = target_y;
    }/* else {
        target_y = last_y_before_snap;
    }*/
}

switch(mode) {
    case MODE.STRICT:
        vx = target_x;
        vy = target_y;
        break;
    case MODE.LERP:
        if abs(vx - target_x) &lt;= lerp_speed_x
            vx = target_x;
        else
            vx += sign(target_x - vx) * lerp_speed_x;
        if abs(vy - target_y) &lt;= lerp_speed_y
            vy = target_y;
        else
            vy += sign(target_y - vy) * lerp_speed_y;
        break;
    case MODE.ASYM:
        vx += (target_x - vx) * asym_factor_x;
        if use_fall_bias_factor
            vy += (target_y - vy) * asym_factor_y * fall_bias_factor;
        else 
            vy += (target_y - vy) * asym_factor_y;
    break;
}

vx += shake_scale_x * (random(2) - 1);
vy += shake_scale_y * (random(2) - 1);

view_xview = vx - view_wview / 2;
view_yview = vy - view_hview / 2;

view_angle = 3 * (random(2) - 1) * (shake_scale_x + shake_scale_y) / 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
