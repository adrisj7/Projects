<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics variables
velx = 0;
vely = 0;

fric_ground = 0.5;
fric_wall = 0.9;

fric_air_x = 0;
fric_air_y = 0;

bounce_x = 0;
bounce_y = 0;

grav = GRAV_DEFAULT;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Checkable Physics Variables
touching_ground = false;
touching_wall = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set checkable variables
touching_ground = place_meeting(x, y + 1, obj_collision);
touching_wall = place_meeting(x - 1, y, obj_collision) || place_meeting(x + 1, y, obj_collision);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move by physics

// Apply gravity
vely += grav * gamestate.time_speed;


// Apply friction
if touching_ground {
    if (abs(velx) &lt; fric_ground * gamestate.time_speed) 
        velx = 0;
    else
        velx -= sign(velx) * fric_ground * gamestate.time_speed; 
} else {
    if (abs(velx) &lt; fric_air_x * gamestate.time_speed) 
        velx = 0;
    else
        velx -= sign(velx) * fric_air_x * gamestate.time_speed; 
}

if touching_wall {
    if (abs(vely) &lt; fric_wall * gamestate.time_speed) 
        vely = 0;
    else
        vely -= sign(vely) * fric_wall * gamestate.time_speed; 
} else {
    if (abs(vely) &lt; fric_air_y * gamestate.time_speed) 
        vely = 0;
    else
        vely -= sign(vely) * fric_air_y * gamestate.time_speed;
}

// Collisions
if place_meeting(x + velx * gamestate.time_speed, y, obj_collision) {
    var dx = 0;
    while !place_meeting(x + dx, y, obj_collision) dx += sign(velx);
    dx -= sign(velx);
    x += dx;
    velx *= -1 * bounce_x;
    //if abs(velx) &lt; 1 velx = 0;
}

x += velx * gamestate.time_speed;

if place_meeting(x, y + vely * gamestate.time_speed, obj_collision) {
    var dy = 0;
    while !place_meeting(x, y + dy, obj_collision) dy += sign(vely);
    dy -= sign(vely);
    y += dy;
    if (abs(vely) &lt; grav * gamestate.time_speed) vely = 0;
    vely *= -1 * bounce_y;
    //if abs(vely) &lt; 1 || (vely &lt; grav * gamestate.time_speed) vely = 0;
}
y += vely * gamestate.time_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
