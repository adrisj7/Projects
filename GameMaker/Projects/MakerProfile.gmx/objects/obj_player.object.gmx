<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_physics</parentName>
  <maskName>mask_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inherited Physics variables
velx = 0;
vely = 0;

fric_ground = 0.3;
fric_wall = 0;//0.9;

fric_air_x = 0.4;
fric_air_y = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement variables

move_accel = 1;
move_max_speed = 2.6;

max_fall_speed = 6;

jump_start_vel = 3.5;
jump_accel = 0.3;
jump_accel_max_duration = 6;

jump_wall_side_vel = 3.5;

jump_delay_threshold = 6;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Punching Variables
punch_duration = 15; // duration of punch
punch_speed = 5;     // speed we travel during punch
punch_delay = 0;    // delay between punches

punch_slomo_duration = 10; // duration of punch slomo (NOT DEPENDENT ON TIME SPEED)

punch_fall_duration = 10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gravity modes
grav_jumping = GRAV_DEFAULT * 0.2;
grav_ascending = GRAV_DEFAULT * 0.7;
grav_descending = GRAV_DEFAULT * 1.4;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement and Punching util variables

drop_timer = 0; // time elapsed after drop
jump_timer = 0; // time elapsed while jumping
dir_facing = 1; // direction we're facing (1 right, -1 left. No 0.)

punch_timer = punch_duration + 1; // time elapsed since punch
punch_ready = false;              // whether we can punch (recharges when landed)
is_punching = false;              // whether we're actually punching
punch_slomo_timer = punch_slomo_duration + 1;

punch_angle = 0; // angle of punching...
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input variables

// Move
input_axis_x = 0;
input_jumping = false;

input_punching = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visuals
image_speed_walking = 5.0 / 60.0;
image_speed_jumping = 0;

base_image_speed = image_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera
cam = instance_create(x, y, obj_camera);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particle system
punch_particle_system = instance_create(0,0,obj_player_poofer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move camera
cam.x = x;
cam.y = y;

cam.snap_y = touching_ground || touching_wall;

cam.use_fall_bias_factor = is_punching &amp;&amp; vely &gt; 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement and Punching

// Gravity handling (overturned by jumping)
if (vely &gt; 0) grav = grav_descending;
else grav = grav_ascending;

// keys
input_axis_x = keyboard_check(vk_right) - keyboard_check(vk_left);
input_jumping_pressed = keyboard_check_pressed(vk_up);
input_jumping_held = keyboard_check(vk_up);
input_punching = keyboard_check_pressed(ord("Z"));
input_down_held = keyboard_check(vk_down);

// x movement
if input_axis_x != 0 // &amp;&amp; !is_punching
    dir_facing = input_axis_x;

velx += move_accel * input_axis_x * gamestate.time_speed;

velx = clamp(velx, -move_max_speed, move_max_speed);

// jumping

if !is_punching &amp;&amp; input_jumping_pressed &amp;&amp; drop_timer &lt; jump_delay_threshold {

    vely = -1 * jump_start_vel;
    jump_timer = jump_accel_max_duration; // reset jump_timer
    drop_timer = jump_delay_threshold;    // we can't "start" jumping again

    /*
    // Wall jump
    if touching_wall {
        velx = -1 * dir_facing * jump_wall_side_vel;
    }*/

}
if input_jumping_held &amp;&amp; jump_timer &gt; 0 {
    grav = grav_jumping;
    vely -= jump_accel * gamestate.time_speed;
}

if vely &gt; max_fall_speed
    vely = max_fall_speed;

if vely &lt; 0 touching_ground = false; // &lt;-- force fix for "fast double jump" issue (might cause problems later)

// punching
if input_punching &amp;&amp; punch_timer &gt; (punch_duration + punch_delay) &amp;&amp; (punch_ready || input_down_held) {
    punch_ready = false;
    punch_timer = 0;

    punch_angle = point_direction(0,0,input_axis_x, -1 * (input_jumping_held - input_down_held));
    if (input_down_held)
        punch_angle = -90;
}

if punch_timer &lt; punch_duration + punch_fall_duration
    grav = grav_ascending;

// If we're punching down
if is_punching &amp;&amp; (abs(punch_angle - 90) &gt; 180 - 45) {
    if !touching_ground punch_timer = punch_duration - 1;
}

is_punching =  punch_timer &lt; punch_duration;

if is_punching {
    // OLD:
    //velx = dir_facing * punch_speed;
    //vely = -1;

    velx = lengthdir_x(punch_speed,punch_angle);
    vely = lengthdir_y(punch_speed,punch_angle);

    // Make falling down faster
    if (abs(punch_angle - 90) == 180)
        vely *= 2.5;
        
    // Give us the ability to switch mid punch
    if sign(velx) != sign(dir_facing) {
        velx *= -1;   
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unhook from walls when not pressing key
if input_axis_x != 1 &amp;&amp; place_meeting(x + 1, y, obj_collision)
    x -= 1;

if input_axis_x != -1 &amp;&amp; place_meeting(x - 1, y, obj_collision)
    x += 1;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Break blocks/enemies AND stop when hitting solid wall/ground

if is_punching {
    var exploded = false;

    var box = instance_place(x + velx * gamestate.time_speed, y + vely,obj_breakable_box);
    if (box != noone) {
        exploded = true;
        explode_object(box,10,4,3,15,4);
        punch_slomo_timer = 0;
        cam.shake_scale_x = 5;
        cam.shake_scale_y = 5;
    }
    var enemy = instance_place(x + velx * gamestate.time_speed, y + vely,obj_enemy);
    if (enemy != noone) {
        exploded = true;
        explode_object(enemy,10,4,3,15,4);
        punch_slomo_timer = 0;
        cam.shake_scale_x = 5;
        cam.shake_scale_y = 5;
    }
    
    if (exploded) {
        punch_ready = true;
        cam.snap_y = true;
        //punch_timer -= 5;
    } else {
        if place_meeting(x + velx, y + vely,obj_collision) {
            part_player_emit(punch_particle_system,x,y,punch_angle);
            punch_timer = punch_duration;
            cam.shake_scale_x = lengthdir_x(5,punch_angle);
            cam.shake_scale_y = lengthdir_y(5,punch_angle);
        }
    }

}

var time_speed_target = 1;
if (punch_slomo_timer &lt; punch_slomo_duration) {
    time_speed_target = 0.05;
}
gamestate.time_speed += (time_speed_target - gamestate.time_speed) * 0.3;
cam.shake_scale_x *= 0.7;
cam.shake_scale_y *= 0.7;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Die when touching spikes or enemies
if place_meeting(x,y,obj_spikes) || (!is_punching &amp;&amp; place_meeting(x,y,obj_enemy)) {
    explode_object(id,6,8,4,10,0.1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop punching at ground and wall


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visuals

image_xscale = dir_facing;

if (input_axis_x == 0) {
    sprite_index = spr_player;
} else {
    sprite_index = spr_player_walk;
}

if !touching_ground {
    sprite_index = spr_player_walk;
    base_image_speed = image_speed_jumping;
    image_index = 0;
} else {
    // if we were jumping before...
    if (base_image_speed = image_speed_jumping)
        image_index = 1;    

    base_image_speed = image_speed_walking;
}

if input_axis_x != 0 &amp;&amp; touching_wall 
    sprite_index = spr_player_wall;

if is_punching {
    var distance_from_90 = abs(punch_angle - 90);

    if (distance_from_90 &lt; 22.5) {
        sprite_index = spr_player_punch_up;
    } else if (distance_from_90 &lt; 45 + 22.5) {
        sprite_index = spr_player_punch_sideup;
    } else if (distance_from_90 &lt; 90 + 22.5) {
        sprite_index = spr_player_punch;
    } else if (distance_from_90 &lt; 90+45 + 22.5 || distance_from_90 = 225) { // JANK!
        sprite_index = spr_player_punch_sidedown;
    } else {
        sprite_index = spr_player_punch_down;
    }
}
image_speed = base_image_speed * gamestate.time_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Timers
drop_timer += gamestate.time_speed;

if (touching_ground /*|| touching_wall*/) {
    drop_timer = 0;
    punch_ready = true;
}

jump_timer -= gamestate.time_speed;

punch_timer += gamestate.time_speed;

punch_slomo_timer++; // NOT dependent on punch time
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
