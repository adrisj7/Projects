package util;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;

public class FileHandler {

    // heheh
    private static final String TOP_TEXT = "<!-- This Document is generated by "
            + "YUMEditor's Tiled To GameMaker Converter," + " if you edit it by hand then you're wasting your time!-->";

    // Reads XML from a string path
    public static Document readXML(String fname) {
        File inputFile = new File(fname);
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
//        dbFactory.setValidating(true);
//        dbFactory.setIgnoringElementContentWhitespace(true);
        DocumentBuilder dBuilder;
        try {
            dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(inputFile);
            doc.getDocumentElement().normalize();
            return doc;
        } catch (ParserConfigurationException | SAXException | IOException e) {
            System.out.println("Failed to parse xml at " + fname + "!");
            e.printStackTrace();
            return null;
        }
    }

    // Saves an XML Document
    public static void saveXML(Document xmldoc, String fname, boolean includeAutoGeneratedThing) {
        // Delete the top comment if it exists
        if (includeAutoGeneratedThing) {
            Node first = xmldoc.getFirstChild();
            if (first instanceof Comment) {
                xmldoc.removeChild(first);
            }
        }

        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer;
        try {
            transformer = transformerFactory.newTransformer();
        } catch (TransformerConfigurationException e) {
            e.printStackTrace();
            return;
        }
        // Formatting
        transformer.setOutputProperty(OutputKeys.INDENT, "yes"); // indentation
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2"); // indentation
        transformer.setOutputProperty("omit-xml-declaration", "yes"); // no <?xml version... >
//        transformer.setOutputProperty(OutputKeys.METHOD, "html"); // <emptything></emptything>

        DOMSource source = new DOMSource(xmldoc);
        StringWriter outWriter = new StringWriter();
        StreamResult result = new StreamResult(outWriter);
        if (includeAutoGeneratedThing) {
            outWriter.write(TOP_TEXT + "\n");
        }
        try {
            transformer.transform(source, result);
        } catch (TransformerException e) {
            e.printStackTrace();
            return;
        }
        StringBuffer sb = outWriter.getBuffer();
        String finalText = sb.toString();
        try {
            outWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        FileHandler.writeTextFile(fname, finalText);
    }

    // Writes text to a file
    public static void writeTextFile(String fname, String text) {
        try (PrintWriter out = new PrintWriter(fname)) {
            out.print(text);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
}
