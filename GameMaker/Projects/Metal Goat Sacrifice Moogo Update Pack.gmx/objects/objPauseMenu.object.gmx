<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu, Progress and other util things

_selection = 0;
_selection_count = 4; // keyboard, sound, music, exit to title screen

// Selection positions
_selection_x[0] = 0;
_selection_y[0] = 20;
_selection_x[1] = 0;
_selection_y[1] = 40;
_selection_x[2] = 0;
_selection_y[2] = 60;
_selection_x[3] = 0;
_selection_y[3] = 100;

// Between 0 and 1
_progress = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Selections

if (_progress &gt; 0.5) {

    // Move by wasd or arrow keys, clamp and wrap around
    var y_axis = keyboard_check_pressed(vk_down) + keyboard_check_pressed(ord("S")) 
               - keyboard_check_pressed(vk_up)   - keyboard_check_pressed(ord("W"));
    y_axis = sign(y_axis);
    _selection += y_axis;
    if _selection &lt; 0 {
        _selection = _selection_count - 1;
    } else if _selection &gt;= _selection_count {
        _selection = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Act on selection
if (_progress &gt; 0.5) {
    var x_axis = keyboard_check_pressed(vk_right) + keyboard_check_pressed(ord("D"))
               - keyboard_check_pressed(vk_left)   - keyboard_check_pressed(ord("A"));
    // For sound and the keyboard mode, left and right change it
    if (x_axis != 0) {
        switch (_selection) {
            case 0:
                settings_toggle_control_mode_wasd();
                break;
            case 1:
                settings_change_music_volume(0.2 * x_axis);
                break;
            case 2:
                settings_change_sfx_volume(0.2 * x_axis);
                break;
        }
    }
    
    // For keyboard mode and exit to menu, act!
    if keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space) {
        switch (_selection) {
            case 0:
                settings_toggle_control_mode_wasd();
                break;
            case 3:
                game_restart();
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visible
visible = (_progress != 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw pause menu

// So that GUI makes sense
display_set_gui_size(view_wview, view_hview);

draw_set_alpha(_progress * 0.5);
draw_set_color(c_black);
draw_rectangle(0, 0, view_wview, view_hview, false);
draw_set_alpha(1);

var starty = -100,
    endy   = view_hview/2;

var ypos = 1 - abs(power(_progress - 1, 5));
ypos = ypos * (endy - starty) + starty;

var xpos = view_wview / 2 - 60;

// TITLE

var title_x = xpos - 64,
    title_y = ypos - 100;
var amp = 7 * power(1 - _progress, 2);
draw_set_color(c_gray);
draw_text_wave_transformed(title_x, title_y, "Settings  Menu", 1, 1, amp, 18, _progress * pi * 1.5 + 0.2);
draw_set_color(c_white);
draw_text_wave_transformed(title_x + 2, title_y + 2, "Settings  Menu", 1, 1, amp, 18, _progress * pi + pi*0.5 + 0.2);

// SELECTION CURSOR

draw_set_color(c_white);
draw_text(title_x + _selection_x[_selection],
          title_y + _selection_y[_selection],
          "&gt;");

// TEXT OPTION: KEYBOARD MODE
var temp_x = 10 + title_x + _selection_x[0],
    temp_y = title_y + _selection_y[0];
draw_set_color(c_white);
if (_selection == 0) draw_set_color(c_yellow);
draw_text(temp_x, temp_y, "Keyboard Mode: ");

temp_x += 100;
if settings_get_control_mode_wasd() {
    draw_set_color(c_purple);
    draw_text(temp_x, temp_y, "&lt; Maggie   (WASD) &gt;");
} else {
    draw_set_color(c_red);
    draw_text(temp_x, temp_y, "&lt; Original (Arrow Keys) &gt;");
}

// TEXT OPTION: SOUND MUSIC
temp_x = 10 + title_x + _selection_x[1];
temp_y = title_y + _selection_y[1];
draw_set_color(c_white);
if (_selection == 1) draw_set_color(c_yellow);
draw_text(temp_x, temp_y, "Music Volume: ");
temp_x += 100;
draw_text(temp_x, temp_y, "&lt; " + string(floor(settings_get_music_volume() * 100)) + "% &gt; ");
// TEXT OPTION: SOUND SFX
temp_x = 10 + title_x + _selection_x[2];
temp_y = title_y + _selection_y[2];
draw_set_color(c_white);
if (_selection == 2) draw_set_color(c_yellow);
draw_text(temp_x, temp_y, "SFX Volume: ");
temp_x += 100;
draw_text(temp_x, temp_y, "&lt; " + string(floor(settings_get_sfx_volume() * 100)) + "% &gt; ");

// TEXT OPTION: EXIT
temp_x = 10 + title_x + _selection_x[3];
temp_y = title_y + _selection_y[3];
draw_set_color(c_white);
if (_selection == 3) draw_set_color(c_yellow);
draw_text(temp_x, temp_y, "Exit to Title Screen");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
