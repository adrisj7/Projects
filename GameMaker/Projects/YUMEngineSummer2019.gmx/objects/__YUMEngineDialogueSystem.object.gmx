<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Public variables and properties

_window_sprite = sprYUMEngineDefaultWindow;

// Check the window sprite, there are 32 colors
_text_colors = array_create(8 * 4);
// Init itself
dialogue_set_window_sprite(_window_sprite);

_default_font = fontYUMEngineDefaultText;

// Whether to automatically accept menu inputs
_auto_menu = true;

// How long to wait on a press before considering it a long hold
_input_hold_delay = 25;
_input_hold_interval = 4;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Util variables

_dialogue_queue_stack = ds_list_create();

// Do we have a dialogue currently open?
_dialogue_open = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input Util

// Are we pressing "Z"
_input_progress = false;
_input_progress_last = _input_progress;
// Are we pressing "X"
_input_cancel   = false;
_input_cancel_last   = _input_cancel;

// TODO: Remove Copy+Paste
// Input up and down
_input_up_raw   = false;
_input_up_timer = 0;
_input_down_raw = false;
_input_down_timer = 0;
// Left and right
_input_left_raw   = false;
_input_left_timer = 0;
_input_right_raw = false;
_input_right_timer = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Renderers

_text_renderer   = instance_create(0, 0, __YUMEngineTextDialogueRenderer);
_choice_renderer = instance_create(0, 0, __YUMEngineChoiceDialogueRenderer);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu input buffer

// Should we open the menu?
_menu_input_buffer = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input timers

// TODO: Remove Copy+Paste
if _input_up_raw {
    ++_input_up_timer;
} else {
    _input_up_timer = 0;
}

if _input_down_raw {
    ++_input_down_timer;
} else {
    _input_down_timer = 0;
}

if _input_left_raw {
    ++_input_left_timer;
} else {
    _input_left_timer = 0;
}

if _input_right_raw {
    ++_input_right_timer;
} else {
    _input_right_timer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset axis inputs to prevent accidental super scrolling
_input_up    = false;
_input_down  = false;
_input_left  = false;
_input_right = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Prev variables
_input_progress_last = _input_progress;
_input_cancel_last = _input_cancel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Auto Menu: Inputs and menu
if _auto_menu {

    // Default Inputs
    dialogue_progress(keyboard_check(ord("Z")) || keyboard_check(vk_enter) || keyboard_check(vk_space));
    dialogue_cancel(keyboard_check(ord("X")) 
                 || keyboard_check(ord("C"))
                 || keyboard_check(ord("V"))
                 || keyboard_check(ord("B"))
                 || keyboard_check(ord("N")));
    dialogue_up(keyboard_check(vk_up) || keyboard_check(ord("K")));
    dialogue_down(keyboard_check(vk_down) || keyboard_check(ord("J")));
    dialogue_left(keyboard_check(vk_left) || keyboard_check(ord("H")));
    dialogue_right(keyboard_check(vk_right) || keyboard_check(ord("L")));

    if !dialogue_is_open() {
        // Menu
        if __dialogue_check_cancel_pressed() &amp;&amp; !menu_is_open() {
            _menu_input_buffer = true;
        }
        
        if _menu_input_buffer {
            var player = character_get_player();
            if player == noone || character_took_step(player) || !character_is_moving(player) {
                show_debug_message("[DEBUG] wtf");
                menu_open(MenuType.Player);
                _menu_input_buffer = false;
            }
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
