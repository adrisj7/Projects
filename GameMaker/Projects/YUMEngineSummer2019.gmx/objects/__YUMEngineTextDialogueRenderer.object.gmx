<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Public variables

// The text we're drawing
_text = "";

// The delay between characters
// 1 is fastest (no delay)
_text_speed = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Util variables

// Are we active, period?
_active = false;

// Are we scrolling?
_text_active = false;

// The current character in our string we're at
_char_index = 0;

// Whether we're waiting for player input
_waiting = false;

// Are we waiting to close?
_waiting_closing = false;

// Were we closed by a choice option?
// NOT USED
_closed_by_choice = false;

// 0: current char
// 1: next char
_char_progress = 0;

// If this is greater than 0, we will wait
_wait_buffer = 0;

// Are we waiting to continue the text?
_waiting_next = false;

// The thing that controls the waiting indicator
_bouncer_index = 0;

// Opener
// TODO: roomify this

var num_rows = 3;

var text_height = num_rows*
    ( font_get_size(dialogue_get_default_font()) + dialogue_get_text_spacing());

var tpx = dialogue_get_text_padding_x(),
    tpy = dialogue_get_text_padding_y();

_opener = dialogue_opener_create(
        20,
        view_hview[0] - 20 - text_height - 2 * tpy,
        view_wview[0] - 20*2,
        text_height + 2 * tpy + 10 // for good measure
);
// Draw over
_opener.depth = depth + 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dialogue Opener

if dialogue_opener_is_open(_opener) {
    _text_active = true;
}

if _active &amp;&amp; dialogue_opener_is_closed(_opener) {
    // Close and move on
    _active = false;
    if !_closed_by_choice
        __dialogue_next();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Progress text
if _active &amp;&amp; _text_active {

    if _waiting {
        // We're waiting on the player
        if __dialogue_check_progress_pressed() {
            _waiting = false;
        }
    }

    // This is not an else because we want instant feedback!
    if !_waiting {
        if _wait_buffer &gt; 0 {
            --_wait_buffer;
        } else if _waiting_next {
            if __dialogue_check_progress_pressed() {
                _waiting_next = false;
            }
        } else {
            // We're waiting for the next character
            _char_progress += 1;
            // We're progressing the text
            if _char_progress &gt;= _text_speed {
                // Call forth the next character!
                // Base this on the NEXT character we see (we are moving past it afterall)
                _char_index += __dialogue_text_step(_char_index + 1);
                if _char_index &gt; string_length(_text) {
                    // Stop drawing, start waiting for a close
                    _char_index = string_length(_text);
                    _text_active = false;
                    _waiting_closing = true;
                } else {
                    // TODO: Parse codes here
                    _char_progress -= _text_speed;
                }
            }
        }
    }
}

// We're waiting for the user to close the text box (or move on)
if _waiting_closing {
    if __dialogue_check_progress_pressed() {
        _waiting_closing = false;
        // If we have more text, start from the beginning

        // Debug
        // show_debug_message("[DEBUG]: " + string(__dialogue_queue_get_up_next_type()));

        // show_debug_message("[DEBUG] BEFORE CHOOSING: ");
        // __dialogue_debug_print_queue_stack();

        var next_type = __dialogue_queue_get_up_next_type();

        if next_type == DialogueType.Text {
            var data = __dialogue_queue_get_up_next_data();
            _text = data[@ DialogueText.text];
            _text_active = true;
            _char_index = 0;
            _char_progress = 0;
            //__dialogue_queue_stack_pop();
            __dialogue_pop();
            //ds_list_queue_pop(__get_dialogue_current_queue());
        } else {
            _closed_by_choice = false;
            __dialogue_stop_text();
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bouncer index

if _waiting || _waiting_closing || _waiting_next {
    _bouncer_index += 1 / 15;
} else {
    _bouncer_index = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw text if we're open
display_set_gui_size(view_wview[0], view_hview[0]);

if dialogue_opener_is_open(_opener) {

    //var substr = string_copy(_text, 0, _char_index);
    draw_set_alpha(1);

    var tpx = dialogue_get_text_padding_x(),
        tpy = dialogue_get_text_padding_y();

    dialogue_draw_text_ext(
            dialogue_opener_get_window_x(_opener) + tpx,
            dialogue_opener_get_window_y(_opener) + tpy,
            _text,
            _char_index,
            font_get_size(dialogue_get_default_font()) + dialogue_get_text_spacing(),
            dialogue_opener_get_window_width(_opener) - 2*tpx
    );
//    draw_text_ext(
//            dialogue_opener_get_window_x(_opener) + _text_padding_x,
//            dialogue_opener_get_window_y(_opener) + _text_padding_y,
//            substr,
//            font_get_size(dialogue_get_default_font()) + _text_spacing,
//            dialogue_opener_get_window_width(_opener) - 2*_text_padding_x
//    );

    // If we're waiting
    if _waiting || _waiting_closing || _waiting_next {
        dialogue_draw_bouncer(
                dialogue_opener_get_window_x(_opener) + dialogue_opener_get_window_width(_opener) / 2,
                dialogue_opener_get_window_y(_opener) + dialogue_opener_get_window_height(_opener) - tpy/2,
                _bouncer_index
        );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
