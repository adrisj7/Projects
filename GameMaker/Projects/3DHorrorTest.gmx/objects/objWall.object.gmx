<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Object3D</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// texture
_texture = sprite_get_texture(sprite_index, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw wall

var x0 = x;
var x1 = x+sprite_width; // dependent on image_xscale
var y0 = y;
var y1 = y+sprite_height; // dependent on image_yscale
var z0 = z+sprite_get_height(sprite_index)*image_zscale;
var z1 = z;

// North
//bad d3d_draw_wall(x1, y0, z1, x0, y0, z0, _texture, image_xscale, image_zscale);
// flip
d3d_draw_wall(x0, y0, z0, x1, y0, z1, _texture, image_xscale, image_zscale);

// South
//bad d3d_draw_wall(x0, y1, z0, x1, y1, z1, _texture, image_xscale, image_zscale);
d3d_draw_wall(x1, y1, z1, x0, y1, z0, _texture, image_xscale, image_zscale);

// East
// flip
/*var dx = x1 - x0;
var dy = y1 - y0;
var dz = z1 - z0;
d3d_transform_stack_push();
d3d_transform_add_translation(x0, y0 + dy/2, z0);
d3d_transform_add_scaling(1, -1, 1);
d3d_draw_wall(0, -dy/2, 0, x1 - x0, y1 - y0 - dy/2, z1 - z0, _texture, image_yscale, image_zscale);
d3d_transform_stack_pop();
*/
d3d_draw_wall(x1, y0, z0, x1, y1, z1, _texture,image_yscale, image_zscale);
//bad 3d_draw_wall(x1, y1, z1, x1, y0, z0, _texture, image_yscale, image_zscale);

// West
//bad d3d_draw_wall(x0, y0, z0, x0, y1, z1, _texture, image_yscale, image_zscale);
d3d_draw_wall(x0, y1, z1, x0, y0, z0, _texture, image_yscale, image_zscale);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
