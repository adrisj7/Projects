<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>objDialogueHandlerParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Override
transition_set_duration(_transition, 5, 8);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dialogue variables

// The full text, including commands.
_rawText = "";

// The text without commands
_text = "";


// Scroll Speeds (how fast it scrolls the text)
// ex. 10 / GAME_SPEED is 10 characters per second
_charSpeed =   60 / GAME_SPEED; // a-z / A-Z
_spaceSpeed =  60 / GAME_SPEED;
_commaSpeed =  20 / GAME_SPEED;
_periodSpeed = 12 / GAME_SPEED;

// When we're speeding up (holding x or z was it?) by what scale?
_speedUpFactor = 50; // TODO: Isn't this a bit excessive...
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Util variables and Transition variables

// Are we paused? (only happens during choices)
_paused = false;

// Map storing parsed text and command info
_commandData = 0;

// Which command is next up in line
_commandIndex = 0;

// How far in the text are we?
_textCounter = 0;

// Are we speeding through the text?
_speeding = false;

// Are we at the end of our dialogue?
_end = false;

// Floaty Next Icon Thing
_floatyNextCounter = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Effects

enum DIALOGUE_TEXT_EFFECT {
    NONE, // Default
    WAIT, // Waiting for a period of time
    NEXT, // Waiting for the player to press the action key
};

_effect = DIALOGUE_TEXT_EFFECT.NONE;
_effect_wait_timer = 0;  // If we're waiting, move this down.
_effect_speed_scale = 1; // We scale our speed by this
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Window variables (TODO: GUI standards?)
var h = WINDOW_HEIGHT / 4;
var buffer = 12;

_window_xpos = buffer;
_window_ypos = WINDOW_HEIGHT - h - buffer;
_window_width = WINDOW_WIDTH - 2*buffer;
_window_height = h;

_window_text_buffer = 12;
_max_text_width = _window_width - 2*_window_text_buffer;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IsFinished, Effects, and Scroll text

// Are we open and ready for text?
if (_active &amp;&amp; !_paused &amp;&amp; transition_is_open(_transition)) {
    // Are we at the end of our text?
    if (_textCounter &gt;= string_length(_text)) {
        _textCounter = string_length(_text); // Cap it off
        if keyboard_check_pressed( input_get("action") ) || keyboard_check_pressed( input_get("back") ) {
            // Start the closing animation if we're at the end. Otherwise, finish and move on.
            if _end {
                transition_close(_transition);
                //_state = DIALOGUE_STATE.CLOSING;
                //_transitionCounter = 0;
            } else {
                _finished = true;
            }
        }
    } else {
        // Otherwise, continue scrolling!

        // Set scroll speed //
        var currentChar = string_char_at(_text, floor(_textCounter));
        var scrollSpeed = 0;
        // Note: == works for string comparison in GMS.
        switch currentChar {
            case " ":
                scrollSpeed = _spaceSpeed;
                break;
            case ",":
                scrollSpeed = _commaSpeed;
                break;
            case ".":
                scrollSpeed = _periodSpeed;
                break;
            default:
                scrollSpeed = _charSpeed;
        }

        // SPEEDING CONTROLS //
        // Prevents holding the "Z" key from carrying on from previous dialogue.
        if keyboard_check_pressed( input_get("action")) {
            _speeding = true;
        }
        if keyboard_check_released( input_get("action")) {
            _speeding = false;
        }

        // EFFECT CONDITIONS //
        switch _effect {
            case DIALOGUE_TEXT_EFFECT.WAIT:
                _effect_wait_timer--;
                // Timeout
                if (_effect_wait_timer &lt;= 0) {
                    _effect = DIALOGUE_TEXT_EFFECT.NONE;
                } else {
                    scrollSpeed = 0;
                }
                break;
            case DIALOGUE_TEXT_EFFECT.NEXT:
                if keyboard_check_pressed( input_get("action") ) || keyboard_check_pressed( input_get("back")) {
                    _effect = DIALOGUE_TEXT_EFFECT.NONE;   
                    _speeding = false;      // Prevent speeding on start    
                    _floatyNextCounter = 0; // Hide this        
                } else {
                    scrollSpeed = 0;
                }
                break;                
        }

        // If we're speeding up //
        if _speeding {
            scrollSpeed *= _speedUpFactor;    
        }

        // Actually move the counter //
        _textCounter += scrollSpeed * _effect_speed_scale * game_get_dtime();

        // PARSE COMMANDS //
        if _effect == DIALOGUE_TEXT_EFFECT.NONE {
            // Where in text is our next command?
            var cindex = parse_text_commands_get_command_charindex(_commandData, _commandIndex);
            //show_debug_message("index: " + string(cindex));
            // While we still have commands to execute:
            while(_textCounter + 1 &gt;= cindex) { // + 1 because of off-by-one errors
                if (cindex == -1) {
                    // We have no more commands
                    break;
                }
                // Move our text counter to the command in question
                _textCounter = cindex - 1; // Off by 1
                //_scrollSpeed = 0;

                parse_text_commands_execute_command(_commandData, _commandIndex);
                _commandIndex++;
                cindex = parse_text_commands_get_command_charindex(_commandData, _commandIndex);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Floaty next counter

if (_effect == DIALOGUE_TEXT_EFFECT.NEXT || _textCounter &gt;= string_length(_text)) {
    _floatyNextCounter += game_get_dtime();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw window with transitions

draw_reset();

d3d_transform_stack_push();

// If we're opening or closing, apply some magic effects.
var progress = transition_get_progress_updown(_transition);

var cubeCurve = curve_up_poly(progress, 1, 0.3),
    sqrCurve  = curve_up_poly(progress, 1, 2);


// Center the window for scaling
d3d_transform_add_translation(0, -_window_height/2, 0);
d3d_transform_add_scaling(1, cubeCurve, 1);
// DeCenter the window
d3d_transform_add_translation(0, _window_height/2, 0);
// Alpha to the mix
draw_set_alpha(cubeCurve);

var realAlpha = draw_get_alpha();
draw_set_alpha(realAlpha * 0.8); // Window transparancy is 0.8 now.

d3d_transform_add_translation(_window_xpos, _window_ypos, 0);
draw_window(0, 0, _window_width, _window_height, draw_get_alpha());

d3d_transform_stack_pop();

draw_recover();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw window text


if transition_is_open(_transition) {
    draw_set_font(font_menu);
    draw_reset();
    draw_set_color(c_white);

    var substring = string_copy(_text, 0, _textCounter + 1);

    draw_text_ext(
            _window_xpos + _window_text_buffer, 
            _window_ypos + _window_text_buffer,
            substring,
            3 + font_get_size(font_menu),
            _max_text_width
    );
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw floaty next counter

if (!_paused &amp;&amp; transition_is_open(_transition) &amp;&amp; _floatyNextCounter &gt; 0) {
    var floatyNextCounterOpenTime = 10; // How long it takes to fade in
    var deltaHeight = curve_triangle(_floatyNextCounter, 70, 1);

    /// Pixelify the delta Height
    deltaHeight = 2 * round(deltaHeight); 

    draw_set_alpha(min(1, _floatyNextCounter / floatyNextCounterOpenTime));

    draw_window_floaty_next(WINDOW_WIDTH / 2, _window_ypos + _window_height + deltaHeight - 10);
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG

if game_is_debug_overlay() {
    draw_set_font(font_debug);

    draw_reset();

    draw_text(10, 10+11*0, "Text:                " + _text);
    draw_text(10, 10+11*5, "Text Progress:       " + string(floor(_textCounter)) + " / " +  string(string_length(_text)));
    draw_text(10, 10+11*6, "Transition Progress: " + string(transition_get_progress(_transition)));
    draw_text(10, 10+11*7, "Transition State:    " + string(transition_get_state(_transition)));
    //draw_text(10, 10+11*8, "Start?               " + string(_start));
    //draw_text(10, 10+11*9, "End?                 " + string(_end));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
