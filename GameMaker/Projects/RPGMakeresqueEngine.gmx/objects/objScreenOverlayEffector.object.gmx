<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw util

_alphaChangeSpeed = 0.05;
_blurChangeSpeed = 2 / 30;

_alpha = 0;
_blur = 0;

_alphaTarget = 0;
_blurTarget = 0;

_extraDrawSurface = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shader data
_shaderGaussianHorizontalResolution = shader_get_uniform(shaderGaussianHorizontal, "resolution");
_shaderGaussianHorizontalAmount     = shader_get_uniform(shaderGaussianHorizontal, "blur_amount");
_shaderGaussianVerticalResolution = shader_get_uniform(shaderGaussianVertical, "resolution");
_shaderGaussianVerticalAmount     = shader_get_uniform(shaderGaussianVertical, "blur_amount");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Application surface
application_surface_draw_enable(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alpha and blur change

var deltaAlpha = _alphaTarget - _alpha;
if abs(deltaAlpha) &lt; _alphaChangeSpeed {
    _alpha = _alphaTarget;
} else {
    _alpha += sign(deltaAlpha) * _alphaChangeSpeed;
}

var deltaBlur = _blurTarget - _blur;
if abs(deltaBlur) &lt; _blurChangeSpeed {
    _blur = _blurTarget;
} else {
    _blur += sign(deltaBlur) * _blurChangeSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw application surface and rectangle

//display_set_gui_size(view_wport, view_hport);

display_set_gui_size(view_wport * view_wview / 640, view_hport * view_hview / 480);

if (_blur &gt; 0) {
    shader_set(shaderGaussianHorizontal);
    shader_set_uniform_f(_shaderGaussianHorizontalResolution, view_wview);
    shader_set_uniform_f(_shaderGaussianHorizontalAmount, _blur);
    if !surface_exists(_extraDrawSurface) {
        _extraDrawSurface = surface_create( surface_get_width(application_surface), surface_get_height(application_surface));
    }
    surface_set_target(_extraDrawSurface);
    draw_surface(application_surface, 0, 0);
    surface_reset_target();
    shader_reset();

    shader_set(shaderGaussianVertical);
    shader_set_uniform_f(_shaderGaussianVerticalResolution, view_hview);
    shader_set_uniform_f(_shaderGaussianVerticalAmount, _blur);
    surface_set_target(application_surface);
    draw_surface(_extraDrawSurface, 0, 0);
    surface_reset_target();
    shader_reset();
}


draw_surface_stretched(application_surface, 0, 0, display_get_gui_width(), display_get_gui_height());


draw_set_color(c_black);
draw_set_alpha(_alpha);
var buffer = 100;
draw_rectangle(-buffer, -buffer, view_wview + buffer, view_hview + buffer, false);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
