<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Buttons

_newDialogueButton = editor_button_create(7,32 + 7*3,0,ord("N"));
_newTabButton = editor_button_create(7,0, 0, ord("T"), true);
_editTabNameButton = editor_button_create(7, 7, 1, ord("R"), true);
_newButton =  editor_button_create(7,          WINDOW_HEIGHT - 32 - 7, 8, ord("N"), true);
_saveButton = editor_button_create(7*2 + 32,   WINDOW_HEIGHT - 32 - 7, 6, ord("S"), true);
_loadButton = editor_button_create(7*3 + 32*2, WINDOW_HEIGHT - 32 - 7, 7, ord("O"), true);

_newDialogueButton.depth = depth - 1;
_newTabButton.depth = depth - 1;
_editTabNameButton.depth = depth - 1;
_newButton.depth = depth - 1;
_saveButton.depth = depth - 1;
_loadButton.depth = depth - 1;

editor_button_set_static(_newDialogueButton, true);
editor_button_set_static(_newTabButton, true);
editor_button_set_static(_editTabNameButton, true);
editor_button_set_static(_newButton, true);
editor_button_set_static(_saveButton, true);
editor_button_set_static(_loadButton, true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tabs

_tabNames = ds_list_create();
_tabSelected = 0;

ds_list_add(_tabNames, "Tab 1");

// Janky: Instead of actual tabs, just offset position.
_tabOffset = 32 * 500;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera
_cameraSpeed = 5;
_cameraZoom = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mouse moving

_mouseMoveDialogue = noone;
_mouseMoveCamera = false;

// Delta position between frame position and mouse position when we first clicked.
_mouseMoveDeltaX = 0;
_mouseMoveDeltaY = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Code Editor system
instance_create(0, 0, objDialogueEditorCodeEditor);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save and Loading variables

_fileName = "";

_isLoading = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Window properties

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
instance_destroy(_newDialogueButton);
instance_destroy(_newTabButton);
instance_destroy(_editTabNameButton);
instance_destroy(_newButton);
instance_destroy(_saveButton);
instance_destroy(_loadButton);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tab scrolling

var changed = false;
if keyboard_check(vk_control) {
    if keyboard_check_pressed(vk_pageup) {
        _tabSelected--;
        changed = true;
    }
    if keyboard_check_pressed(vk_pagedown) {
        _tabSelected++;
        changed = true;
    }
}

_tabSelected = wrap(_tabSelected, 0, ds_list_size(_tabNames));

// A quick and dirty way to make it seem like there are "different" tabs
if changed {
    view_xview = _tabSelected * _tabOffset;
    view_yview = _tabSelected * _tabOffset;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// New tab button

if editor_is_button_pressed(_newTabButton) {
    var name = get_string("New tab name:", "Tab");
    if (name == "") {
        // cancel
    } else {
        if ds_list_find_index(_tabNames, name) != -1 {
            show_message('Cannot create new tab, name "' + name + '" already exists!');
        } else {
            ds_list_add(_tabNames, name);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// New dialogue button

if editor_is_button_pressed(_newDialogueButton) {
    var tabName = _tabNames[| _tabSelected];
    var name = get_string("New dialogue name:", tabName);
    if (name == "") {
        // Cancel
    } else {
        var canname = true;
        with(objDialogueEditorDialogue) {
            if (/*_tab == other._tabNames[|other._tabSelected] &amp;&amp; */_name == name) {
                canname = false;
                break;
            }
        }
        if canname {
            var dialogueThing = instance_create(view_xview + 100, view_yview + 100, objDialogueEditorDialogue);
            dialogueThing._tab = _tabNames[| _tabSelected];
            dialogueThing._name = name;
        } else {
            show_message('Cannot make dialogue with name "' + name + '", duplicate names!!');
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tab rename button
if editor_is_button_pressed(_editTabNameButton) {
    var name = get_string("Rename Tab:", _tabNames[| _tabSelected]);
    if (name == "") {
        // cancel
    } else {
        var found = ds_list_find_index(_tabNames, name);
        if found != _tabSelected &amp;&amp; found != -1 {
            show_message('Cannot rename tab to "' + name + '", duplicate names!!');
        } else {
            _tabNames[| _tabSelected] = name;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// New. Save and Load button

if editor_is_button_pressed(_newButton) {
    if show_question("New dialogue page? Unsaved progress will be lost!") {
        editor_new();
    }
}
if editor_is_button_pressed(_saveButton) {
    editor_save();
}
if editor_is_button_pressed(_loadButton) {
    editor_load();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera keyboard controls and ZOOM

var camXaxis = keyboard_check(vk_right) - keyboard_check(vk_left);
var camYaxis = keyboard_check(vk_down) - keyboard_check(vk_up);

view_xview += _cameraSpeed*camXaxis;
view_yview += _cameraSpeed*camYaxis;

var camZoomAxis = mouse_wheel_down() - mouse_wheel_up();
_cameraZoom += 0.4 * camZoomAxis;
_cameraZoom = clamp(_cameraZoom, 0.5, 4);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mouse moving camera

var mx = -window_mouse_get_x(),
    my = -window_mouse_get_y();

// CAMERA
if mouse_check_button_pressed(mb_right) {
    _mouseMoveDeltaX = view_xview - mx;
    _mouseMoveDeltaY = view_yview - my;
    _mouseMoveCamera = true;
    _mouseMoveDialogue = noone;
}

if _mouseMoveCamera {
    view_xview = mx + _mouseMoveDeltaX;
    view_yview = my + _mouseMoveDeltaY;
    if mouse_check_button_released(mb_right) {
        _mouseMoveCamera = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mouse moving Dialogues

var mx = editor_get_mouse_x(false),
    my = editor_get_mouse_y(false);

if !_mouseMoveCamera {
    // DIALOGUES
    if mouse_check_button_pressed(mb_left) {
        _mouseMoveDialogue = collision_point(mx, my, objDialogueEditorDialogue, true, false);
        if _mouseMoveDialogue != noone {
            _mouseMoveDeltaX = _mouseMoveDialogue.x - mx;
            _mouseMoveDeltaY = _mouseMoveDialogue.y - my;
        }
    }
    if mouse_check_button(mb_left) &amp;&amp; _mouseMoveDialogue != noone {
    
        var buttonPressed = false;
        with (objDialogueEditorButton) {
            if _pressed {
                buttonPressed = true;
            }
        }
        if !buttonPressed {
            _mouseMoveDialogue.x = mx + _mouseMoveDeltaX;
            _mouseMoveDialogue.y = my + _mouseMoveDeltaY;
        } else {
            _mouseMoveDialogue = noone;
        }
    } else {
        _mouseMoveDialogue = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw a background grid
draw_clear($cbefdd);
draw_set_color(c_gray);

var d = 32;
var w = 2;
for(var xx = floor(view_xview / d) * d; xx &lt; view_xview + view_wview + d; xx+=d) {
    draw_line_width(xx, view_yview, xx, view_yview+view_hview, w);
}
for(var yy = floor(view_yview/ d) * d; yy &lt; view_yview + view_hview + d; yy+=d) {
    draw_line_width(view_xview, yy, view_xview+view_wview, yy, 2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Origin

editor_apply_view_transformation();
var xx = round(view_xview / _tabOffset) * _tabOffset,
    yy = round(view_yview / _tabOffset) * _tabOffset;
draw_sprite(sprDialogueEditorOrigin, 0, xx + view_wview/2, yy+ view_hview/2);
d3d_transform_set_identity();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tab bar

draw_set_font(font_debug);

var padding = 7;

// Tab space
draw_set_color(c_gray);
draw_rectangle(0, 0, WINDOW_WIDTH, 32+2*padding, false);


var xtab = 2*padding + 32;
for(var i = 0; i &lt; ds_list_size(_tabNames); i++) {
    var name = _tabNames[| i];
    var length = padding * 2 + string_width(name);

    if (i == _tabSelected) {
        draw_set_color(c_blue);
    } else {
        draw_set_color(c_white);
    }
    draw_rectangle(xtab,0,xtab + length,32,true);
    draw_text(xtab + padding,8, name);

    xtab += length;
}

_newTabButton.x = xtab;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
