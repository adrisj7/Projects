<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision grid and collision parameters

// Starting size, totally arbitrary.
_grid = ds_grid_create(10, 10);

// How big are our collision tiles?
_collisionTileWidth = sprite_get_width(sprTileColliision);
_collisionTileHeight = _collisionTileWidth;


//_tileCollisionMap = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEP Tile depth data
//_tileDepths = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up collision grid

var w = floor(room_width / _collisionTileWidth);
var h = floor(room_height / _collisionTileHeight);

// Clear and resize grid
ds_grid_clear(_grid, false);
ds_grid_resize(_grid, w, h); // resize should clear all greater values to zero.

// For every tile: Fill in the grids that our space occupies, then clean ourselves up.
with(objTileCollision) {
    var gridX = floor(x / other._collisionTileWidth);
    var gridY = floor(y / other._collisionTileHeight);
    // Note: This assumes that the image width and height are
    //          equal to the collision width and height.
    for(var xa = gridX; xa &lt; gridX + image_xscale; xa++) {
        for(var ya = gridY; ya &lt; gridY + image_yscale; ya++) {
            tileset_set_collision(xa, ya, true);
            //other._grid[# xa, ya] = true;
        }
    }
    instance_destroy();
}


// Deprecated:
/*
// Record tile depth data

// This is super stupid...

ds_list_clear(_tileDepths);

var tiles = tile_get_ids();
for(var i = 0; i &lt; array_length_1d(tiles); i++) {
    var t = tiles[i];
    var d = tile_get_depth(t);
    if ds_list_find_index(_tileDepths, d) == -1 {
        ds_list_add(_tileDepths, d);
//        show_message("Depth: " + string(d) + ", " + string(array_length_1d(tile_get_ids_at_depth(d))));
    }
}

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG ONLY

if game_is_debug_overlay() {

    for(var xx = 0; xx &lt; ds_grid_width(_grid); xx++) {
        for(var yy = 0; yy &lt; ds_grid_height(_grid); yy++) {
            draw_sprite(sprTileColliision, 0, xx*_collisionTileWidth, yy*_collisionTileHeight);
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
